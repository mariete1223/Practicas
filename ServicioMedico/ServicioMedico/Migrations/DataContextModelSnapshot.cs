// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServicioMedico.Repositories;

#nullable disable

namespace ServicioMedico.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MedicoPaciente", b =>
                {
                    b.Property<long>("medicosId")
                        .HasColumnType("bigint");

                    b.Property<long>("pacientesId")
                        .HasColumnType("bigint");

                    b.HasKey("medicosId", "pacientesId");

                    b.HasIndex("pacientesId");

                    b.ToTable("MedicoPaciente");
                });

            modelBuilder.Entity("ServicioMedico.Entities.Cita", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("attribute11")
                        .HasColumnType("int");

                    b.Property<long>("diagnosticoFKId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("fechaHora1")
                        .HasColumnType("datetime2");

                    b.Property<long>("medicoFKId")
                        .HasColumnType("bigint");

                    b.Property<string>("motivoCita")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("pacienteFKId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("diagnosticoFKId")
                        .IsUnique();

                    b.HasIndex("medicoFKId");

                    b.HasIndex("pacienteFKId");

                    b.ToTable("Cita");
                });

            modelBuilder.Entity("ServicioMedico.Entities.Diagnostico", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("enfermedad")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("valoracionEspedialista")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Diagnostico");
                });

            modelBuilder.Entity("ServicioMedico.Entities.Usuario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("apellidos")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("clave")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("usuario")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.HasKey("Id");

                    b.ToTable("Usuario", (string)null);
                });

            modelBuilder.Entity("ServicioMedico.Entities.Medico", b =>
                {
                    b.HasBaseType("ServicioMedico.Entities.Usuario");

                    b.Property<string>("numColegio")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.ToTable("Medico", (string)null);
                });

            modelBuilder.Entity("ServicioMedico.Entities.Paciente", b =>
                {
                    b.HasBaseType("ServicioMedico.Entities.Usuario");

                    b.Property<string>("NSS")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("direccion")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("numTarjeta")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("telefono")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.ToTable("Paciente", (string)null);
                });

            modelBuilder.Entity("MedicoPaciente", b =>
                {
                    b.HasOne("ServicioMedico.Entities.Medico", null)
                        .WithMany()
                        .HasForeignKey("medicosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServicioMedico.Entities.Paciente", null)
                        .WithMany()
                        .HasForeignKey("pacientesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServicioMedico.Entities.Cita", b =>
                {
                    b.HasOne("ServicioMedico.Entities.Diagnostico", "diagnostico")
                        .WithOne("cita")
                        .HasForeignKey("ServicioMedico.Entities.Cita", "diagnosticoFKId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServicioMedico.Entities.Medico", "medico")
                        .WithMany("citas")
                        .HasForeignKey("medicoFKId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServicioMedico.Entities.Paciente", "paciente")
                        .WithMany("citas")
                        .HasForeignKey("pacienteFKId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("diagnostico");

                    b.Navigation("medico");

                    b.Navigation("paciente");
                });

            modelBuilder.Entity("ServicioMedico.Entities.Medico", b =>
                {
                    b.HasOne("ServicioMedico.Entities.Usuario", null)
                        .WithOne()
                        .HasForeignKey("ServicioMedico.Entities.Medico", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServicioMedico.Entities.Paciente", b =>
                {
                    b.HasOne("ServicioMedico.Entities.Usuario", null)
                        .WithOne()
                        .HasForeignKey("ServicioMedico.Entities.Paciente", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServicioMedico.Entities.Diagnostico", b =>
                {
                    b.Navigation("cita")
                        .IsRequired();
                });

            modelBuilder.Entity("ServicioMedico.Entities.Medico", b =>
                {
                    b.Navigation("citas");
                });

            modelBuilder.Entity("ServicioMedico.Entities.Paciente", b =>
                {
                    b.Navigation("citas");
                });
#pragma warning restore 612, 618
        }
    }
}
